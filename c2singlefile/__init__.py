#!/usr/bin/python3
# -*- coding: utf-8 -*-

from __future__ import print_function

import os
import re

start_re = re.compile(r"// start:(\w+)")
include_re = re.compile(r"\s*#include\s+<([\w.-_]+)>.*")

def parse_file(f):
    fdict = {
        "name": os.path.basename(f.name),
        "includes": [],
        "datatypes": [],
        "macros": [],
        "declarations": [],
        "definitions": []
        }

    append_to = None

    for line in f.readlines():
        if line.startswith("// start:"):
            m = start_re.search(line)
            append_to = m.group(1)
        elif line.startswith("// end:"):
            append_to = None
        else:
            if append_to:
                fdict[append_to].append(line)

    return fdict

def fix_includes(*includes):
    iset = set()

    for j in includes:
        for i in j:
            m = include_re.search(i)
            if m:
                iset.update({"#include <{}>\n".format(m.group(1))})

    return list(iset)

def c2singlefile(*files):
    fdicts = []
    outlines = []

    for file in files:
        with open(file, "r") as f:
            fdicts.append(parse_file(f))

    includes = fix_includes(*[d["includes"] for d in fdicts])

    outlines.append(
"""\
// AUTOMATICALLY GENERATED, DO NOT EDIT
// This file was generated by c2singlefile
// https://github.com/Depaulicious/c2singlefile

// Files included here:
""")

    for d in fdicts:
        outlines.append("// - {}\n".format(d["name"]))

    outlines.append("\n")

    outlines += includes
    outlines.append("\n")

    for part in ("macros", "datatypes", "declarations", "definitions"):
        outlines.append("// {}\n".format(part.capitalize()))

        for fdict in fdicts:
            if len(fdict[part]) == 0:
                continue
            outlines.append("// From {}\n\n".format(fdict["name"]))
            outlines += fdict[part]
            outlines.append("\n")

    return outlines

def main():
    import argparse

    parser = argparse.ArgumentParser(description="Turns a bunch of specially formatted c files into a single file")
    parser.add_argument("files", nargs="+", help="The files that should be parsed, in order of importance (most important last)")
    args = parser.parse_args()

    for l in c2singlefile(*args.files):
        print(l, end="")

if __name__ == "__main__":
    main()